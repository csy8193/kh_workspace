package edu.kh.collection.model.service;

import java.util.HashSet;
import java.util.Set;

public class SetService {
	
	// Set(집합)
	// - 순서가 존재하지 않음 (== 인덱스가 없음)
	// - 중복 데이터(객체) 저장 불가능, (null도 1개만 저장 가능)
	// -> 일반적인 Set에서 중복 데이터 확인을 위해 equals가 반드시 오버라이딩 되어 있어야 한다.
	
	public void example1() {
		
		// HashSet
		// - hash 함수를 이용해서 데이터를 저장하고 빠른 검색이 가능한 Set
		
		
		// * hash 함수란? 
		// -> 입력된 단어를 지정된 길이의 문자열로 변환하는 함
		
		// * hashCode() 메소드
		// -> 해시함수를 이용해 데이터가 다르면 중복되지 않는 숫자를 만드는 메소드.
		
		// *** HashSet 사용 선행조건!!! ***
		// 1) Set에 저장되려는 객체에 equals() 오버라이딩 되어있어야 한다.
		// 2) + hashCode()도 오버라이딩 되어 있어야 한다.
		
		// String을 이용한 HashSet 예제
		// -> 자바 제공 클래스들은 기본적으로 equals(), hashCode()등의 메소드가
		//	  작성되어 있는 경우가 많음
		
		Set<String> set = new HashSet<String>();
		
		set.add( "삼성" );
		set.add(new String("Apple"));
		set.add(new String("사과"));
		set.add(new String("바나나"));
		set.add(new String("오렌지"));
		set.add(new String("Apple"));
		
		System.out.println("저장된 데이터 개수 : " + set.size());
		// -> 6개의 데이터를 추가했지만 5개가 나올 것이다!
		// 왜? Set은 중복 데이터를 허용 X
		
		System.out.println( set.toString() );
		// -> set에 저장된 데이터를 모두 출력
		// -> 순서가 엉망진창 == 순서가 유지되지 않는다
		
		
		// 간이 로또번호 생성기
		Set<Integer> lotto = new HashSet<Integer>();
		// 컬랙션은 객체만 저장 가능!!
		// int -> Integer
		
		while(true) {
			
			int random = (int)(Math.random() * 45 + 1);
			
			lotto.add(random);
			
			if(lotto.size() == 6) {
				break;
			}
			
			
		}
	}
	
	
	
	
}
